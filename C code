#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
int N=100001;
bool sieve[100001];
void createSieve(){
    for(int i=2;i<=N;i++) {
        sieve[i]=true;
    }

    for(int i=2;i*i<=N;i++) {
        if(sieve[i]) {
            for(int j=i*i;j<=N;j+=i) {
                sieve[j]=false;
            }
        }
    }
}
vector<int> generatePrime(int n) {
        vector<int> ds;
        for(int i=2;i<=n;i++) {
            if(sieve[i]) {
                ds.push_back(i);
            }
        }
        return ds;
}
int main() {
    createSieve();
    int t;
    cin>>t;
    while(t-->0) {
        ll l,r;
        cin>>l>>r;
        // step 1 = Generate All prime till sqrt(r);
          vector<int> primes=generatePrime((int)sqrt(r));
       
          // Step 2 = Crate dummy array of size (r-l+1) and make everyone as 1
          int dummy[(int)(r-l+1)] ;
          for(int i=0;i<(int)(r-l+1);i++) {
              dummy[i]=1;
          }
          
          for(auto pr : primes) {
              ll firstMultiple=(l/pr)*pr;
              if(firstMultiple<l) firstMultiple+=pr;
              for(ll i=max(firstMultiple,(ll)(pr*pr)) ; i<=r ; i+=pr) {
                  dummy[(int)(i-l)]=0;
              }
          }
           if(l==1) {
               dummy[0]=0;
           }
          for(ll i=l;i<=r;i++) {
              if(dummy[(int)(i-l)]==1) {
                  cout<<i<<" ";
              }
          }
          cout<<endl;
        //   cout<<l<<"\t"<<r<<"\n";

     }
    return 0;
}
